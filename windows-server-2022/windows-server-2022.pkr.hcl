# Template for Windows Server 2022

variable "proxmox_api_url" {
    type = string
}

variable "proxmox_api_token_id" {
    type = string
}

variable "proxmox_api_token_secret" {
    type = string
    sensitive = true
}

packer {
    required_plugins {
        windows-update = {
            version = ">= 0.14.1"
            source = "github.com/rgl/windows-update"
        }
    }
}

source "proxmox" "windows-server-2022" {
    # Connection settings
    proxmox_url = "${var.proxmox_api_url}"
    username = "${var.proxmox_api_token_id}"
    token = "${var.proxmox_api_token_secret}"
    insecure_skip_tls_verify = true
    node = "pve"

    # This is the Windows Server 2022 Evaluation ISO. This build will probably work with non-eval versions of Server 2022.
    iso_file = "local:iso/WindowsServer2022_EVAL_x64FRE_en-us.iso"
    iso_storage_pool = "local"
    iso_checksum = "3E4FA6D8507B554856FC9CA6079CC402DF11A8B79344871669F0251535255325"

    vm_name = "win2022-template"

    memory = "2048"
    cores = "1"

    os = "win10"

    qemu_agent = "true"

    network_adapters {
        model = "virtio"
        bridge = "vmbr0"
        firewall = "false"
    }

    # Was type = "scsi" but was getting a driver error
    disks {
        type = "virtio"
        storage_pool = "Datastore1"
        storage_pool_type = "directory"
        disk_size = "30G"
        format = "qcow2"
    }

    template_name = "Windows-Server-2022-Template"
    template_description = "Template generated by Packer"

    cloud_init = true
    cloud_init_storage_pool = "Datastore1"

    # This ISO needs to contain the following files:
    # 1. Autounattend.xml (also found in the http folder)
    # 2. ConfigureRemotingForAnsible.ps1 - This can be obtained directly from Ansible's GitHub:
    # https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1
    # 3. CloudbaseInitSetup_x64.msi - and specifically the continuous build version. As of now, there are issues using Proxmox with the non-continous build version.
    # It can be found here: https://cloudbase.it/downloads/CloudbaseInitSetup_x64.msi
    additional_iso_files {
        device = "sata3"
        iso_file = "local:iso/Win2022Autounattend.iso"
    }

    additional_iso_files {
        device = "sata4"
        iso_file = "local:iso/virtio-win-0.1.217.iso"
    }

    communicator = "winrm"
    winrm_username = "Administrator"
    winrm_password = "packer"
    winrm_timeout = "40m"
    winrm_insecure = "true"
    winrm_use_ssl = "true"
}

build {
    name = "Windows-Server-2022-Template"
    sources = ["source.proxmox.windows-server-2022"]

    ## This works correctly but commenting out for now in order to do quicker testing.
    # Run Windows Updates and reboot as necessary.
    #provisioner "windows-update" {
    #    search_criteria = "BrowseOnly=0 and IsInstalled=0"
    #    filters = [
    #        "include:$true"
    #    ]
    #}
    
    # This copies over the cloudbase-init configuration files.
    provisioner "file" {
        sources = [
            "windows-server-2022/cloudbase-init/cloudbase-init-unattend.conf",
            "windows-server-2022/cloudbase-init/cloudbase-init.conf"
        ]
        destination = "C:/Program Files/Cloudbase Solutions/Cloudbase-Init/conf/"
    }

    # Install OpenSSH
    provisioner "powershell" {
        elevated_user = "Administrator"
        elevated_password = "packer"
        inline = [
            "Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH.Serv*' | Select-Object -ExpandProperty Name | Foreach-Object {Add-WindowsCapability -Online -Name $_}",
            "Set-Service -Name sshd -StartupType 'Automatic'"
        ]
    }

    # Sysprep with the Cloudbase-Init Unattend.xml.  
    provisioner "windows-shell" {
        inline = [
            "cd \"C:/Program Files/Cloudbase Solutions/Cloudbase-Init/conf\"",
            "c:/Windows/System32/Sysprep/sysprep.exe /quiet /generalize /oobe /unattend:Unattend.xml"
        ]
    }
}